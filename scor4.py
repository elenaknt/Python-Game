def tamplo(sthles):
    """
    >>> tamplo(5)
    [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
    >>> tamplo(6)
    [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
    >>> pinakas=tamplo(10)
    >>> len(pinakas)
    10
    >>> pinakas[0][5]
    0
    """
    """
    Δημιουργεί και επιστρέφει έναν αρχικό πίνακα με όλες τις θέσεις κενές.
    sthles --> Ακέραιος αριθμός που ορίζει το μέγεθος του πίνακα.
    """
    board = [[0 for i in range(sthles)] for j in range(sthles)]
    return board

def sxhmatismosGrammhs(sthles,pinakas,y):
    """
    >>> pinakas=[[1,2,0],[3,2,1],[1,3,2]]  
    >>> sxhmatismosGrammhs(3,pinakas,2)    #doctest: +SKIP
    '  O|  *|  X|'
    """
    """
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    y --> Η γραμμή που θα δημιουργηθεί.
    Δημιουργία μιάς γραμμής του πίνακα κάθε φορά που καλείται από την συνάρτηση g1.
    """
    
    px=["\t "+"|","\tX"+"|","\tO"+"|","\t*"+"|"]
    sum=""
    i=0
    while i<=sthles-1:
        if pinakas[y][i]==0:                    
            sum=sum+px[0]
        elif pinakas[y][i]==1:
            sum=sum+px[2]
        elif pinakas[y][i]==2:
            sum=sum+px[1]
        elif pinakas[y][i]==3:
            sum=sum+px[3]
        elif pinakas[y][i]==4:
            sum=sum+px[0]
        i+=1
    return sum

def g1(sthles,pinakas):
    """
    Εμφάνιση πίνακα με πολλαπλές for για κάθε γραμμή. 
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    grammata=["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]
    row1=[i for i in range(sthles)]
    for k in range(sthles):
        print("   "+str(row1[k]+1), end="\t")
    print("\n")
    for r in range(8*sthles):
        print("-", end="")
    print("\n")
    for y in range(sthles):
            line=sxhmatismosGrammhs(sthles,pinakas,y)
            print(grammata[y]+"|"+line)
    for x in range(8*sthles):
        print("-", end="")
    print("\n")

def elegxosPaikth1(epilogh, pinakas,sthles):
    """
    >>> pinakas=[[1,2,0],[3,2,1],[1,3,2]]
    >>> elegxosPaikth1(2,pinakas,3)  #doctest: +SKIP
    Η στήλη είναι γεμάτη! 
    Δώστε άλλον αριθμό στήλης:
    >>> elegxosPaikth1(3,pinakas,3)
    [[1, 2, 1], [3, 2, 1], [1, 3, 2]]
    """
    """
    Γίνεται έλεγχος εγκυρότητας για την επιλογή στήλης του παίκτη 1 (Αν η στήλη είναι γεμάτη εμφανίζει μήνυμα και ξανά ζητάει αριθμό).
    Τοποθετείται το στοιχείο στη πιο χαμηλή κενή θέση του πίνακα.
    epilogh --> Αριθμός στήλης που διάλεξε ο παίκτης να τοποθετήσει το πιόνι του.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλιασμένες λίστες.
    """
    if pinakas[0][epilogh-1]!=0:
        while pinakas[0][epilogh-1]!=0:
            epilogh=int(input('Η στήλη είναι γεμάτη! \nΔώστε άλλον αριθμό στήλης: '))  
    i=sthles-1
    while i>=0:
        if pinakas[i][epilogh-1]==0:
            pinakas[i][epilogh-1]=1
            break
        i-=1
    return pinakas

def elegxosPaikth2(epilogh,pinakas,sthles):
    """
    >>> pinakas=[[1,0,0,1],[1,0,2,3],[2,0,1,1],[2,1,2,3]]
    >>> elegxosPaikth2(2,pinakas,4)
    [[1, 0, 0, 1], [1, 0, 2, 3], [2, 2, 1, 1], [2, 1, 2, 3]]
    >>> elegxosPaikth2(1,pinakas,4)    #doctest: +SKIP
    Η στήλη είναι γεμάτη! 
    Δώστε άλλον αριθμό στήλης: 
    >>> elegxosPaikth2(3,pinakas,4)
    [[1, 0, 2, 1], [1, 0, 2, 3], [2, 2, 1, 1], [2, 1, 2, 3]]
    """
    """
    Γίνεται έλεγχος εγκυρότητας για την επιλογή στήλης του παίκτη 2 (Αν η στήλη είναι γεμάτη εμφανίζει μήνυμα και ξανά ζητάει αριθμό).
    Τοποθετείται το στοιχείο στη πιο χαμηλή κενή θέση του πίνακα.
    epilogh --> Αριθμός στήλης που διάλεξε ο παίκτης να τοποθετήσει το πιόνι του.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    if pinakas[0][epilogh-1]!=0:
        while pinakas[0][epilogh-1]!=0:
            epilogh=int(input("Η στήλη είναι γεμάτη! \nΔώστε άλλον αριθμό στήλης: "))
    i=sthles-1
    while i>=0:
        if pinakas[i][epilogh-1]==0:
            pinakas[i][epilogh-1]=2
            break
        i-=1
    return pinakas

def mhdenismos(pinakas,sthles):
    """
    >>> pinakas=[[3,2,2,1],[1,3,2,1],[1,2,3,4],[2,1,2,3]]
    >>> mhdenismos(pinakas,4)
    [[0, 2, 2, 1], [1, 0, 2, 1], [1, 2, 0, 0], [2, 1, 2, 0]]
    >>> pinakas=[[1,2,2,1,3],[1,2,3,1,2],[1,3,2,3,4],[2,1,2,3,3],[3,2,1,2,1]]
    >>> mhdenismos(pinakas,5)
    [[1, 2, 2, 1, 0], [1, 2, 0, 1, 2], [1, 0, 2, 0, 0], [2, 1, 2, 0, 0], [0, 2, 1, 2, 1]]
    """
    """
    Μηδενίζει τα στοιχεία που σχημάτισαν τετράδα και τα ίδια πιόνια στη διεύθυνση της τετράδας
    ώστε να γίνει η ολίσθηση των απο πάνω. 
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    for i in range(sthles):
        for j in range(sthles):
            if pinakas[i][j]==3 or pinakas[i][j]==4:
                pinakas[i][j]=0
    return pinakas

def olisthish(pinakas,sthles):
    """
    >>> pinakas=[[0,2,2,1],[1,0,2,1],[1,2,0,4],[2,1,2,0]]
    >>> olisthish(pinakas,4)
    ([[0, 0, 0, 1], [1, 2, 2, 1], [1, 2, 2, 4], [2, 1, 2, 0]], False)
    >>> pinakas=[[1,2,2,0,1],[1,0,2,1,2],[0,1,0,2,1],[1,0,2,0,0],[0,0,0,0,1]]
    >>> olisthish(pinakas,5)
    ([[0, 0, 0, 0, 0], [1, 2, 2, 0, 1], [1, 0, 2, 1, 2], [0, 1, 0, 2, 1], [1, 0, 2, 0, 1]], False)
    >>> pinakas=[[1,2,2,0,1],[1,1,2,1,2],[2,1,1,2,1],[1,1,2,1,1],[1,1,1,1,1]]
    >>> olisthish(pinakas,5)
    ([[1, 2, 2, 0, 1], [1, 1, 2, 1, 2], [2, 1, 1, 2, 1], [1, 1, 2, 1, 1], [1, 1, 1, 1, 1]], True)
    """
    """
    Γίνεται ολίσθηση των στοιχείων που βρίσκονταν πάνω από αυτά που σχημάτισαν τετράδα ή των 
    αντίστοιχων γειτονικών της τετράδας και μηδενίστηκαν.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    flag=True
    for i in range(sthles-1,0,-1):
        k=0
        while k<=sthles-1:
            if pinakas[i][k]==0 and (pinakas[i-1][k]==1 or pinakas[i-1][k]==2):
                pinakas[i][k]=pinakas[i-1][k]
                pinakas[i-1][k]=0
                flag=False
            k+=1
    return pinakas,flag

def score1(s1,pinakas,sthles):  
    """
    >>> pinakas=[[0,2,3,1],[0,0,3,1],[0,2,3,0],[0,1,3,0]]
    >>> score1(10,pinakas,4)
    14
    >>> pinakas=[[4,2,2,0,1],[1,3,2,1,2],[0,1,3,2,1],[1,0,2,3,0],[0,0,0,0,3]]
    >>> score2(20,pinakas,5)
    25
    """            
    """
    Υπολογίζει το σκορ του παίκτη 1 για κάθε πιόνι που αφαιρείται.
    s1 --> Μετρητής του σκορ του παίκτη 1.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    for i in range(sthles):
        for j in range(sthles):
            if pinakas[i][j]==3 or pinakas[i][j]==4:
                s1+=1
    return s1

def score2(s2,pinakas,sthles):  
    """
    >>> pinakas=[[3,2,2,1],[3,0,2,1],[3,2,0,0],[3,1,2,0]]
    >>> score2(0,pinakas,4)
    4
    >>> pinakas=[[3,2,2,0,1],[1,3,2,1,2],[0,1,3,2,1],[1,0,2,3,0],[0,0,0,0,4]]
    >>> score2(0,pinakas,5)
    5
    """          
    """
    Υπολογίζει το σκορ του παίκτη 2 για κάθε πιόνι που αφαιρείται.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """ 
    for i in range(sthles):
        for j in range(sthles):
            if pinakas[i][j]==3 or pinakas[i][j]==4:
                s2+=1
    return s2

def gyroi(four1,four2):  
    """
    >>> gyroi(True,False)
    Ο παίκτης 1 είναι ο νικητής του γύρου!
    >>> gyroi(False,True)
    Ο παίκτης 2 είναι ο νικητής του γύρου!
    """                       
    """
    Εμφανίζει τον νικητή του κάθε γύρου.
    four1, four2 --> Λογικές τιμές για το ποιός κέρδισε τον γύρο.
    """
    if four1==True:
        print("Ο παίκτης 1 είναι ο νικητής του γύρου!")
    elif four2==True:
        print("Ο παίκτης 2 είναι ο νικητής του γύρου!")

def gematospinakas(pinakas,sthles): 
    """
    >>> pinakas=[[1,2,2],[1,1,1],[2,2,2]]
    >>> gematospinakas(pinakas,3)
    True
    >>> pinakas=[[1,0,2],[1,1,1],[2,2,2]]
    >>> gematospinakas(pinakas,3)
    False
    """            
    """
    Ελέγχει αν ο πίνακας είναι γεμάτος ώστε να αποτρέψει τους χρήστες να προσθέσουν στοιχεία
    επιστρέφοντας μία λογική τιμή (flag).
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    flag=True
    i=0
    while i<=sthles-1 and flag==True:
        if pinakas[0][i]==0:
            flag=False
        i+=1
    return flag

def fortwsh(onoma):
    """  
    Γίνεται η φόρτωση παιχνιδιού από αρχείο.
    Δημιουργεί πίνακα που περιέχει κάθε γραμμή του αρχείου σε εμφωλευμένη λίστα βγάζοντας κάθε περιττό
    χαρακτήρα, χωρίζοντας τα στοιχεία από το "," και αλλάζοντας τα στοιχεία από string σε integer.
    Το ίδιο κάνει και με το σκορ των παικτών (s1,s2) και βάζει στη μεταβλητή sthles τον αριθμό 
    των στηλών.  
    Επιστρέφει τον πίνακα, τις στήλες και το σκορ στο πρόγραμμα.
    onoma --> Το όνομα που έδωσε ο παίκτης για φόρτωση του αρχείου.  
    """                    
    f = open(onoma,'r')
    ls=f.readlines()
    pinakas=[]
    skor=ls[len(ls)-1].strip()
    skor=skor.split(',')
    s1=int(skor[0])
    s2=int(skor[1])
    for i in range(len(ls)-1):
        x=ls[i].strip()
        x=x.split(',')
        pinakas.append(x)
    for i in range(len(pinakas)):
        for j in range(len(pinakas)):
            pinakas[i][j]=int(pinakas[i][j])
    sthles=len(pinakas)
    return sthles,pinakas,s1,s2

def save(filename,sthles,pinakas,s1,s2):
    """
    >>> pinakas=[[0,0,0,0,0],[1,1,1,1,1],[2,2,2,2,2],[2,1,2,1,1],[1,2,1,2,1]]
    >>> sthles=5
    >>> filename='dokimastiko.csv'
    >>> s1=7
    >>> s2=9
    >>> save(filename,sthles,pinakas,s1,s2)
    """
    """
    Κάνει αποθήκευση του παιχνιδιού.
    Κάθε γραμμή του πίνακα (εμφωλευμένη λίστα) γίνεται λίστα με string στοιχεία τα οποία
    ενώνονται σαν ένα μεγάλο string και χωρίζονται με "," ενώ αλλάζει γραμμή για την επόμενη 
    εμφωλευμένη λίστα του πίνακα και έτσι δημιουργείται αρχείο για αποθήκευση μαζί με το σκορ 
    στη τελευταία γραμμή.
    filename --> Όνομα αρχείου που δίνει ο χρήστης για αποθήκευση.
    s1, s2 --> Σκορ του κάθε παίκτη.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    def ls_to_str(pinakas,i):
        nls=[]
        for j in range(len(pinakas)):
            if pinakas[i][j]==1:
                nls.append('1')
            elif pinakas[i][j]==2:
                nls.append('2')
            elif pinakas[i][j]==0:
                nls.append('0')
        return nls
    f=open(filename,"w")
    s1=str(s1)
    s2=str(s2)
    skor=[s1,s2]
    for i in range(sthles):
        newls=ls_to_str(pinakas,i)
        f.write(','.join(newls)+"\n")
    f.write(','.join(skor)+"\n")
    f.close()

def nikhths(s1,s2):
    """
    >>> nikhths(10,11) #doctest: +SKIP
    "Μπράβο παίκτη 2! Νίκησες το παιχνίδι!"
    >>> nikhths(20,11) #doctest: +SKIP
    "Μπράβο παίκτη 1! Νίκησες το παιχνίδι!"
    >>> nikhths(10,10) #doctest: +SKIP
    "Μπράβο και στους δύο! Το παιχνίδι έληξε με ισοπαλία!"
    >>> nikhths(0,0) #doctest: +SKIP
    "Δεν υπήρξε νικητής!"
    """
    """
    Παίρνει τα τελικά σκορ κάθε παίκτη τα εμφανίζει και έπειτα 
    αφού κάνει σύγκριση εμφανίζει μήνυμα με τον νικητή. Τέλος
    αυτή η συνάρτηση καλείται όταν ο πίνακας έχει γεμίσει 
    οπότε το παιχνίδι δεν μπορεί να συνεχιστεί και ζητείται 
    η αποθήκευση του.
    """
    print("Τελικό σκορ: ",s1,"-",s2)                        
    if s1>s2:
        print("Μπράβο παίκτη 1! Νίκησες το παιχνίδι!")
    elif s2>s1:
        print("Μπράβο παίκτη 2! Νίκησες το παιχνίδι!")
    elif s1==s2:
        print("Μπράβο και στους δύο! Το παιχνίδι έληξε με ισοπαλία!")
    elif s1==0 and s2==0:
        print("Δεν υπήρξε νικητής!")
    while w!="s":                                           
        w=input('Παρακαλώ πατήστε το πλήκτρο "s" για αποθήκευση του παιχνιδιού! ')
    return w

def orizontia1(pinakas,sthles):
    """
    >>> pinakas=[[1,1,1,1,1],[2,5,6,7,7],[0,1,1,1,1],[8,7,8,7,7],[0,1,1,1,1]]
    >>> orizontia1(pinakas,5)
    ([[3, 3, 3, 3, 4], [2, 5, 6, 7, 7], [0, 3, 3, 3, 3], [8, 7, 8, 7, 7], [0, 3, 3, 3, 3]], True)
    >>> pinakas=[[1,1,1,1,0,1],[2,5,6,7,5,7],[0,1,1,1,5,1],[8,7,8,7,5,7],[1,0,1,1,1,1],[1,1,1,1,1,1]]
    >>> orizontia1(pinakas,6)
    ([[3, 3, 3, 3, 0, 1], [2, 5, 6, 7, 5, 7], [0, 1, 1, 1, 5, 1], [8, 7, 8, 7, 5, 7], [1, 0, 3, 3, 3, 3], [3, 3, 3, 3, 4, 4]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 οριζόντια επιστρέφοντας την 
    τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for i in range(sthles):
        c1=0
        for j in range(sthles):
            if pinakas[i][j]==1:
                c1+=1
            else:
                c1=0
            if c1==4:
                four1=True
                for a in range(j-3,j+1):
                    pinakas[i][a]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for b in range(j-4,-1,-1):                  
                    if (pinakas[i][b+1]==3 or pinakas[i][b+1]==4) and pinakas[i][b]==1:
                        pinakas[i][b]=4
                for c in range(j+1,sthles):
                    if (pinakas[i][c-1]==3 or pinakas[i][c-1]==4) and pinakas[i][c]==1:
                        pinakas[i][c]=4
    return pinakas,four1

def orizontia2(pinakas,sthles):
    """
    >>> pinakas=[[2,2,2,2,2],[2,5,6,7,7],[0,2,2,2,2],[8,7,8,7,7],[0,2,2,2,2]]
    >>> orizontia2(pinakas,5)
    ([[3, 3, 3, 3, 4], [2, 5, 6, 7, 7], [0, 3, 3, 3, 3], [8, 7, 8, 7, 7], [0, 3, 3, 3, 3]], True)
    >>> pinakas=[[2,2,2,2,0,2],[2,5,6,7,5,7],[0,2,2,2,5,2],[8,7,8,7,5,7],[2,0,2,2,2,2],[2,2,2,2,2,2]]
    >>> orizontia2(pinakas,6)
    ([[3, 3, 3, 3, 0, 2], [2, 5, 6, 7, 5, 7], [0, 2, 2, 2, 5, 2], [8, 7, 8, 7, 5, 7], [2, 0, 3, 3, 3, 3], [3, 3, 3, 3, 4, 4]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 οριζόντια επιστρέφοντας την 
    τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for i in range(sthles):
        c=0
        for j in range(sthles):
            if pinakas[i][j]==2:
                c+=1
            else:
                c=0
            if c==4:
                four2=True
                for a in range(j-3,j+1):
                    pinakas[i][a]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for b in range(j-4,-1,-1):                  
                    if (pinakas[i][b+1]==3 or pinakas[i][b+1]==4) and pinakas[i][b]==2:
                        pinakas[i][b]=4
                for c in range(j+1,sthles):
                    if (pinakas[i][c-1]==3 or pinakas[i][c-1]==4) and pinakas[i][c]==2:
                        pinakas[i][c]=4
    return pinakas,four2

def katheta1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,1,0,1],[1,0,1,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,0,1,0,0]]
    >>> katheta1(pinakas,5)
    ([[0, 0, 1, 0, 3], [3, 0, 1, 0, 3], [3, 0, 1, 0, 3], [3, 0, 0, 0, 3], [3, 0, 1, 0, 0]], True)
    >>> pinakas=[[1,0,1,0,0,0],[1,0,1,0,1,1],[1,1,1,0,1,1],[1,1,1,0,1,1],[1,1,0,0,1,1],[1,1,0,0,0,1]]
    >>> katheta1(pinakas,6)
    ([[3, 0, 3, 0, 0, 0], [3, 0, 3, 0, 3, 3], [3, 3, 3, 0, 3, 3], [3, 3, 3, 0, 3, 3], [4, 3, 0, 0, 3, 3], [4, 3, 0, 0, 0, 4]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 κάθετα επιστρέφοντας την 
    τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for j in range(sthles):    
        c=0            
        for i in range(sthles):
            if pinakas[i][j]==1:
                c+=1
            else:
                c=0
            if c==4:
                four1=True
                for a in range(i-3,i+1):
                    pinakas[a][j]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for b in range(i-4,-1,-1):                      
                    if (pinakas[b+1][j]==3 or pinakas[b+1][j]==4) and pinakas[b][j]==1:
                        pinakas[b][j]=4
                for c in range(i+1,sthles):
                    if (pinakas[c-1][j]==3 or pinakas[c-1][j]==4) and pinakas[c][j]==1:
                        pinakas[c][j]=4
    return pinakas,four1

def katheta2(pinakas,sthles):
    """
    >>> pinakas=[[2,0,2,0,0,0],[2,0,2,0,2,2],[2,2,2,0,2,2],[2,2,2,0,2,2],[2,2,0,0,2,2],[2,2,0,0,0,2]]
    >>> katheta2(pinakas,6)
    ([[3, 0, 3, 0, 0, 0], [3, 0, 3, 0, 3, 3], [3, 3, 3, 0, 3, 3], [3, 3, 3, 0, 3, 3], [4, 3, 0, 0, 3, 3], [4, 3, 0, 0, 0, 4]], True)
    >>> pinakas=[[0,0,2,0,2],[2,0,2,0,2],[2,0,2,0,2],[2,0,0,0,2],[2,0,2,0,0]]
    >>> katheta2(pinakas,5)
    ([[0, 0, 2, 0, 3], [3, 0, 2, 0, 3], [3, 0, 2, 0, 3], [3, 0, 0, 0, 3], [3, 0, 2, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 κάθετα επιστρέφοντας την 
    τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for j in range(sthles):    
        c=0            
        for i in range(sthles):
            if pinakas[i][j]==2:
                c+=1
            else:
                c=0
            if c==4:
                four2=True
                for a in range(i-3,i+1):
                    pinakas[a][j]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for b in range(i-4,-1,-1):                      
                    if (pinakas[b+1][j]==3 or pinakas[b+1][j]==4) and pinakas[b][j]==2:
                        pinakas[b][j]=4
                for c in range(i+1,sthles):
                    if (pinakas[c-1][j]==3 or pinakas[c-1][j]==4) and pinakas[c][j]==2:
                        pinakas[c][j]=4
    return pinakas,four2

def kiria1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0],[0,1,0,0,0],[2,2,1,2,2],[2,1,2,1,0],[0,2,0,2,1]]
    >>> kiria1(pinakas,5)
    ([[0, 0, 0, 0, 0], [0, 3, 0, 0, 0], [2, 2, 3, 2, 2], [2, 1, 2, 3, 0], [0, 2, 0, 2, 3]], True)
    >>> pinakas=[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0]]
    >>> kiria1(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 στην κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    c1=0
    for i in range(sthles):
        for j in range(sthles):
            if i==j and pinakas[i][j]==1:
                c1+=1
            elif i==j and pinakas[i][j]!=1:
                c1=0
            if c1==4:
                c1=0
                four1=True
                for k in range(0,4):
                    pinakas[i-k][j-k]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for m in range(i+1,sthles):
                    for k in range(j+1,sthles):
                        if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==1:
                            pinakas[m][k]=4
    return pinakas,four1

def kiria2(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0],[0,2,0,0,0],[1,1,2,1,1],[1,2,1,2,0],[0,1,0,1,2]]
    >>> kiria2(pinakas,5)
    ([[0, 0, 0, 0, 0], [0, 3, 0, 0, 0], [1, 1, 3, 1, 1], [1, 2, 1, 3, 0], [0, 1, 0, 1, 3]], True)
    >>> pinakas=[[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0]]
    >>> kiria2(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 διαγώνια στην κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    c2=0
    for i in range(sthles):
        for j in range(sthles):
            if i==j and pinakas[i][j]==2:
                c2+=1
            elif i==j and pinakas[i][j]!=2:
                c2=0
            if c2==4:
                c2=0
                four2=True
                for k in range(0,4):
                    pinakas[i-k][j-k]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                for m in range(i+1,sthles):
                    for k in range(j+1,sthles):
                        if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==2:
                            pinakas[m][k]=4
    return pinakas,four2

def katw_kirias1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0]]
    >>> katw_kirias1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0]]
    >>> katw_kirias1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 διαγώνια και κάτω από την κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for k in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i>j:
                    if i-j==k and pinakas[i][j]==1:
                        c+=1
                    elif i-j==k and pinakas[i][j]!=1:
                        c=0
                    if c==4:
                        c=0
                        four1=True
                        for n in range(0,4):
                            pinakas[i-n][j-n]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        for m in range(i+1,sthles):
                            for k in range(j+1,sthles):
                                if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==1:
                                    pinakas[m][k]=4
    return pinakas,four1

def katw_kirias2(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,0],[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,0,0]]
    >>> katw_kirias2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0]]
    >>> katw_kirias2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 4, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 διαγώνια και κάτω από την κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for k in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i>j:
                    if i-j==k and pinakas[i][j]==2:
                        c+=1
                    elif i-j==k and pinakas[i][j]!=2:
                        c=0
                    if c==4:
                        c=0
                        four2=True
                        for n in range(0,4):
                            pinakas[i-n][j-n]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        for m in range(i+1,sthles):
                            for k in range(j+1,sthles):
                                if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==2:
                                    pinakas[m][k]=4
    return pinakas,four2

def panw_kirias1(pinakas,sthles):
    """
    >>> pinakas=[[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_kirias1(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1],[0,0,0,0,0,0]]
    >>> panw_kirias1(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 διαγώνια και πάνω από την κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for k in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i<j:
                    if j-i==k and pinakas[i][j]==1:
                        c+=1
                    elif j-i==k and pinakas[i][j]!=1:
                        c=0
                    if c==4:
                        c=0
                        four1=True
                        for n in range(0,4):
                            pinakas[i-n][j-n]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        for m in range(i+1,sthles):
                            for k in range(j+1,sthles):
                                if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==1:
                                    pinakas[m][k]=4
    return pinakas,four1

def panw_kirias2(pinakas,sthles):
    """
    >>> pinakas=[[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_kirias2(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0],[0,0,0,0,0,2],[0,0,0,0,0,0]]
    >>> panw_kirias2(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 διαγώνια και πάνω από την κύρια 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for k in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i<j:
                    if j-i==k and pinakas[i][j]==2:
                        c+=1
                    elif j-i==k and pinakas[i][j]!=2:
                        c=0
                    if c==4:
                        c=0
                        four2=True
                        for n in range(0,4):
                            pinakas[i-n][j-n]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        for m in range(i+1,sthles):
                            for k in range(j+1,sthles):
                                if (pinakas[m-1][k-1]==3 or pinakas[m-1][k-1]==4) and pinakas[m][k]==2:
                                    pinakas[m][k]=4
    return pinakas,four2

def deuter1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> deuter1(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0],[1,0,0,0,0,0]]
    >>> deuter1(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 4, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0]], True)

    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 στην δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    c=0
    for i in range(sthles):
        for j in range(sthles):
            if i+j==sthles-1 and pinakas[i][j]==1:
                c+=1
            elif i+j==sthles-1 and pinakas[i][j]!=1:
                c=0
            if c==4:
                c=0
                four1=True
                for k in range(0,4):
                    pinakas[i-k][j+k]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                k=j
                for m in range(i,sthles-1):
                    if pinakas[m+1][k-1]==1 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                        pinakas[m+1][k-1]=4
                    k-=1 
    return pinakas,four1

def deuter2(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> deuter2(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,2,0,0,0,0],[2,0,0,0,0,0]]
    >>> deuter2(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 4, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0]], True)

    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 στην δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    c=0
    for i in range(sthles):
        for j in range(sthles):
            if i+j==sthles-1 and pinakas[i][j]==2:
                c+=1
            elif i+j==sthles-1 and pinakas[i][j]!=2:
                c=0
            if c==4:
                c=0
                four2=True
                for k in range(0,4):
                    pinakas[i-k][j+k]=3
                #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                k=j
                for m in range(i,sthles-1):
                    if pinakas[m+1][k-1]==2 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                        pinakas[m+1][k-1]=4
                    k-=1 
    return pinakas,four2

def panw_deuter1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_deuter1(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_deuter1(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 διαγώνια και πάνω από την δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for z in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i+j<sthles-1:
                    if i+j==z and pinakas[i][j]==1:
                        c+=1
                    elif i+j==z and pinakas[i][j]!=1:
                        c=0
                    if c==4:
                        c=0
                        four1=True
                        for x in range(0,4):
                            pinakas[i-x][j+x]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        k=j
                        for m in range(i,sthles-1):
                            if pinakas[m+1][k-1]==1 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                                pinakas[m+1][k-1]=4
                                k-=1 
    return pinakas,four1

def panw_deuter2(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,2,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_deuter2(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,2,0,0,0,0],[2,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> panw_deuter2(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 διαγώνια και πάνω από την δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for z in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i+j<sthles-1:
                    if i+j==z and pinakas[i][j]==2:
                        c+=1
                    elif i+j==z and pinakas[i][j]!=2:
                        c=0
                    if c==4:
                        c=0
                        four2=True
                        for x in range(0,4):
                            pinakas[i-x][j+x]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        k=j
                        for m in range(i,sthles-1):
                            if pinakas[m+1][k-1]==2 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                                pinakas[m+1][k-1]=4
                                k-=1 
    return pinakas,four2

def katw_deuter1(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0]]
    >>> katw_deuter1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0]]
    >>> katw_deuter1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0]]
    >>> katw_deuter1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 4, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 1 διαγώνια και κάτω από την δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    for z in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i+j>sthles-1:
                    if i+j==sthles-1+z and pinakas[i][j]==1:
                        c+=1
                    elif i+j==sthles-1+z and pinakas[i][j]!=1:
                        c=0
                    if c==4:
                        c=0
                        four1=True
                        for a in range(0,4):
                            pinakas[i-a][j+a]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        k=j
                        for m in range(i,sthles-1):
                            if pinakas[m+1][k-1]==1 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                                pinakas[m+1][k-1]=4
                                k-=1 
    return pinakas,four1

def katw_deuter2(pinakas,sthles):
    """
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,0,0,0,0,0]]
    >>> katw_deuter2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0]]
    >>> katw_deuter2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,2,0,0,0,0]]
    >>> katw_deuter2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 4, 0, 0, 0, 0]], True)
    """
    """
    Ελέγχει για ύπαρξη τετράδας του παίκτη 2 διαγώνια και κάτω από την δευτερεύουσα 
    διαγώνιο επιστρέφοντας την τιμή True αν υπάρχει, αλλιώς False. Αν υπάρχει μετατρέπει
    την τετράδα σε '3' και τα γειτονικά πιόνια του ίδιου παίκτη σε '4'.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    for z in range(1,sthles-1):
        c=0
        for i in range(sthles):
            for j in range(sthles):
                if i+j>sthles-1:
                    if i+j==sthles-1+z and pinakas[i][j]==2:
                        c+=1
                    elif i+j==sthles-1+z and pinakas[i][j]!=2:
                        c=0
                    if c==4:
                        c=0
                        four2=True
                        for a in range(0,4):
                            pinakas[i-a][j+a]=3
                        #Έλεγχος πιονιών στην ίδια διεύθυνση με την τετράδα
                        k=j
                        for m in range(i,sthles-1):
                            if pinakas[m+1][k-1]==2 and (pinakas[m][k]==3 or pinakas[m][k]==4):
                                pinakas[m+1][k-1]=4
                                k-=1 
    return pinakas,four2

def elegxosPinaka1(pinakas,sthles):
    """
    >>> pinakas=[[1,1,1,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[1,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka1(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], False)
    """
    """
    Ελέγχει ολόκληρο τον πίνακα για ύπαρξη τετράδας με πιόνια του παίκτη 1 (οριζόντια,
    κάθετα,διαγώνια) και επιστρέφει True αν υπάρχει, αλλιώς False.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four1=False
    pinakas,four1=orizontia1(pinakas,sthles)
    if four1==False:
        pinakas,four1=katheta1(pinakas,sthles)
        if four1==False:
            pinakas,four1=kiria1(pinakas,sthles)
            if four1==False:
                pinakas,four1=panw_kirias1(pinakas,sthles)
                if four1==False:
                    pinakas,four1=katw_kirias1(pinakas,sthles)
                    if four1==False:
                        pinakas,four1=deuter1(pinakas,sthles)
                        if four1==False:
                            pinakas,four1=panw_deuter1(pinakas,sthles)
                            if four1==False:
                                pinakas,four1=katw_deuter1(pinakas,sthles)
    return pinakas,four1

def elegxosPinaka2(pinakas,sthles):
    """
    >>> pinakas=[[2,2,2,2,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[3, 3, 3, 3, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[2,0,0,0,0,0],[2,0,0,0,0,0],[2,0,0,0,0,0],[2,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,2,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[2,0,0,0,0,0],[0,2,0,0,0,0],[0,0,2,0,0,0],[0,0,0,2,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,2,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 3, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,2],[0,0,0,0,2,0],[0,0,0,2,0,0],[0,0,2,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 3, 0], [0, 0, 0, 3, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0]], True)
    >>> pinakas=[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]
    >>> elegxosPinaka2(pinakas,6)
    ([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], False)
    """
    """
    Ελέγχει ολόκληρο τον πίνακα για ύπαρξη τετράδας με πιόνια του παίκτη 2 (οριζόντια,
    κάθετα,διαγώνια) και επιστρέφει True αν υπάρχει, αλλιώς False.
    sthles --> Αριθμός στηλών πίνακα.
    pinakas --> Λίστα που περιέχει τα στοιχεία κάθε γραμμής του πίνακα σε εμφωλευμένες λίστες.
    """
    four2=False
    pinakas,four2=orizontia2(pinakas,sthles)
    if four2==False:
        pinakas,four2=katheta2(pinakas,sthles)
        if four2==False:
            pinakas,four2=kiria2(pinakas,sthles)
            if four2==False:
                pinakas,four2=panw_kirias2(pinakas,sthles)
                if four2==False:
                    pinakas,four2=katw_kirias2(pinakas,sthles)
                    if four2==False:
                        pinakas,four2=deuter2(pinakas,sthles)
                        if four2==False:
                            pinakas,four2=panw_deuter2(pinakas,sthles)
                            if four2==False:
                                pinakas,four2=katw_deuter2(pinakas,sthles)
    return pinakas,four2

def arxi_paixnidiou(apanthsh):
    """
    Ξεκινάει το παιχνίδι είτε με δημιουργία νέου είτε με φόρτωση αποθηκευμένου.
    Επιστρέφοντας τον πίνακα, τις στήλες και το σκορ κάθε παίκτη.
    apanthsh --> Τιμή string για δήλωση απάντησης.
    """
    if apanthsh=="N":
        temp=int(input("Δώστε ακέραιο αριθμό στηλών/γραμμών ανάμεσα σε 5 και 10: "))
        while temp<5 or temp>10 or int(temp)!=temp:
            temp=int(input("Δώστε ακέραιο αριθμό στηλών/γραμμών ανάμεσα σε 5 και 10: "))
        sthles=temp
        pinakas=tamplo(sthles)
        g1(sthles,pinakas)
        s1=0
        s2=0
    elif apanthsh=="S":
        onoma=input("Δώστε το όνομα του αποθηκευμένου αρχείου: ")
        sthles,pinakas,s1,s2=fortwsh(onoma)
        g1(sthles,pinakas)
    return pinakas,sthles,s1,s2

#Κύριο πρόγραμμα:
apanthsh=input("Καλώς ορίσατε στο παιχνίδι! \nΘα θέλατε να ξεκινήσετε καινούργιο παιχνίδι (Ν) ή να συνεχίσετε ένα αποθηκεύμενο (S); ")
pinakas,sthles,s1,s2=arxi_paixnidiou(apanthsh)                  #Ορίζεται ο αρχικός πίνακας (για νέο ή αποθηκευμένο παιχνίδι)
four1, four2 = False, False                                     #Ξεκινάει το κοινό κομμάτι για νέο και αποθηκευμένο
w="a"                       
telos=False
while w!="s":
    if gematospinakas(pinakas,sthles)==True and telos==False:   #Ελέγχει αν ο πίνακας είναι γεμάτος (μετά από επιλογή πιονιού του παίκτη 2)    
        print('Τέλος παιχνιδιού!')
        telos=True
    else:
        pinakas,four1=elegxosPinaka1(pinakas, sthles)           #Γίνεται ο έλεγχος για πιθανές τετράδες του παίκτη 1 (μετά από επιλογή πιονιού του παίκτη 2)
        if four1==True:         
            g1(sthles,pinakas)                                  #Εμφανίζει τον πίνακα
            s1=score1(s1,pinakas,sthles)                        #Μετράει το σκορ του παίκτη 1
            while four1==True:                                  #Ελέγχει επαναληπτικά για τετράδες του παίκτη 1 μέχρι να μην υπάρχουν
                pinakas=mhdenismos(pinakas,sthles)              #Μηδενίζει τις τετράδες αν υπήρξαν
                flag=False
                while flag==False:                              #Κάνει επαναληπτικά ολίσθηση μέχρι να μην υπάρχουν άλλα στοιχεία για να την κάνει 
                    pinakas, flag =olisthish(pinakas,sthles) 
                gyroi(four1,four2)                              #Εμφανίζει τον νικητή του γύρου
                pinakas,four1=elegxosPinaka1(pinakas, sthles)
                if four1==True:                                  
                   g1(sthles,pinakas)
                   s1=score1(s1,pinakas,sthles)
        epilogh1=int(input("\nΠαίκτη 1, επίλεξε έναν αριθμό στήλης: "))
        while epilogh1<1 or epilogh1>sthles:                    #Γίνεται έλεγχος της επιλογής στήλης του παίκτη 1
            epilogh1=int(input('Παίκτη 1 έχεις επιλέξει λάθος αριθμό στήλης! \nΕπίλεξε έναν ακέραιο αριθμό στήλης εντός των ορίων: '))
        pinakas=elegxosPaikth1(epilogh1, pinakas,sthles)        #Γίνεται ο έλεγχος αν η στήλη είναι γεμάτη και τοποθετεί το πιόνι  
        pinakas,four1=elegxosPinaka1(pinakas, sthles)           #Γίνεται ο έλεγχος για πιθανές τετράδες του παίκτη 1 (μετά από επιλογή πιονιού του παίκτη 1)
        g1(sthles,pinakas)                                      #Εμφανίζει τον πίνακα
        while four1==True:                                      #Ελέγχει επαναληπτικά για τετράδες του παίκτη 1 μέχρι να μην υπάρχουν
            s1=score1(s1,pinakas,sthles)                        #Μετράει το σκορ του παίκτη 1
            pinakas=mhdenismos(pinakas,sthles)                  #Μηδενίζει τις τετράδες αν υπήρξαν
            flag=False
            while flag==False:                                  #Κάνει επαναληπτικά ολίσθηση μέχρι να μην υπάρχουν άλλα στοιχεία για να την κάνει
                pinakas, flag =olisthish(pinakas,sthles)                
            gyroi(four1,four2)                                  #Εμφανίζει τον νικητή του γύρου
            pinakas,four1=elegxosPinaka1(pinakas, sthles)
            if four1==True:                                     
                g1(sthles,pinakas)
#Παίκτης 2
    if gematospinakas(pinakas,sthles)==True and telos==False:   #Ελέγχει αν ο πίνακας είναι γεμάτος (μετά από επιλογή πιονιού του παίκτη 1)
        print('Τέλος παιχνιδιού!')
        telos=False
    else:
        pinakas,four2=elegxosPinaka2(pinakas, sthles)           #Γίνεται ο έλεγχος για πιθανές τετράδες του παίκτη 2 (μετά από επιλογή πιονιού του παίκτη 1)
        if four2==True:                                         
            s2=score2(s2,pinakas,sthles)                        #Μετράει το σκορ του παίκτη 2
            g1(sthles,pinakas)                                  #Εμφανίζει τον πίνακα
            while four2==True:                                  #Ελέγχει επαναληπτικά για τετράδες του παίκτη 2 μέχρι να μην υπάρχουν
                pinakas=mhdenismos(pinakas,sthles)              #Μηδενίζει τις τετράδες αν υπήρξαν
                flag=False
                while flag==False:                              #Κάνει επαναληπτικά ολίσθηση μέχρι να μην υπάρχουν άλλα στοιχεία για να την κάνει
                    pinakas, flag =olisthish(pinakas,sthles)
                gyroi(four1,four2)                              #Εμφανίζει τον νικητή του γύρου
                pinakas,four2=elegxosPinaka2(pinakas,sthles)
                if four2==True:                                 
                    g1(sthles,pinakas)                          
                    s2=score2(s2,pinakas,sthles)
        epilogh2=int(input("\nΠαίκτη 2, επίλεξε έναν αριθμό στήλης: "))           
        while epilogh2<1 or epilogh2>sthles :                   #Γίνεται έλεγχος της επιλογής στήλης του παίκτη 2
            epilogh2=int(input('Παίκτη 2, έχεις επιλέξει λάθος αριθμό στήλης! \nΕπίλεξε έναν ακέραιο αριθμό στήλης εντός των ορίων: '))
        pinakas=elegxosPaikth2(epilogh2, pinakas,sthles)        #Γίνεται ο έλεγχος αν η στήλη είναι γεμάτη και τοποθετεί το πιόνι
        pinakas,four2=elegxosPinaka2(pinakas, sthles)           #Γίνεται ο έλεγχος για πιθανές τετράδες του παίκτη 2 (μετά από επιλογή πιονιού του παίκτη 2) 
        g1(sthles,pinakas)                                      #Εμφανίζει τον πίνακα
        while four2==True:                                      #Ελέγχει επαναληπτικά για τετράδες του παίκτη 2 μέχρι να μην υπάρχουν
            s2=score2(s2,pinakas,sthles)                        #Μετράει το σκορ του παίκτη 2
            pinakas=mhdenismos(pinakas,sthles)                  #Μηδενίζει τις τετράδες αν υπήρξαν
            flag=False
            while flag==False:                                  #Κάνει επαναληπτικά ολίσθηση μέχρι να μην υπάρχουν άλλα στοιχεία για να την κάνει
                pinakas, flag =olisthish(pinakas,sthles)
            gyroi(four1,four2)                                  #Εμφανίζει τον νικητή του γύρου
            pinakas,four2=elegxosPinaka2(pinakas,sthles)
            if four2==True:                                     
                g1(sthles,pinakas)
        print("\nΤο σκορ είναι: ",s1,"-",s2)                    #Εμφανίζει μετά την επιλογή του παίκτη 2 το σκορ τους
        w=input('Πιέστε "s" για αποθήκευση του παιχνιδιού ή οποιοδήποτε άλλο πλήκτρο για να συνεχίσετε: ')
    if telos==True:                                             #Αν ο πίνακας είναι γεμάτος θα τελειώνει το παιχνίδι με την αποθήκευση του εμφανίζοντας νικητή
        w=nikhths(s1,s2)
filename=input("Δώστε όνομα για το αρχείο: ")                   #Ζητά όνομα για την αποθήκευση
save(filename,sthles,pinakas,s1,s2)                             #Το αποθηκεύει

